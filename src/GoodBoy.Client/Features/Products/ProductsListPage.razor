@page "/"
@using GoodBoy.Core.Features.Products

@inject HttpClient HttpClient

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<MudPopoverProvider />

<PageTitle>Explore Products</PageTitle>

<MudContainer>
    @if (_products == null)
    {
        <p>Loading Products...</p>
    }
    else
    {
        <MudText Typo="Typo.h3" GutterBottom="true">Products</MudText>
        <MudText Typo="Typo.body1" GutterBottom="true">Find awesome products here.</MudText>

        // Fixme: Filter checkbox for only in stock products
        @* <MudCheckBox T="bool" @bind-Value="_showOnlyInStock" Label="Show only in stock" Class="ml-n2" /> *@
        var shownProducts = _products.ToList();
        
        @if (_showOnlyInStock)
        {
            shownProducts = shownProducts.Where(p => p.Quantity > 0).ToList();
        }

        @if (_products.Any())
        {
            <MudGrid Spacing="2" Class="mt-8">
                @foreach (var product in _products.Skip((_currentPage - 1) * _pageSize).Take(_pageSize))
                {
                    <MudItem xs="12" sm="6" md="4" lg="4">
                        <ProductCard Product="product" />
                    </MudItem>
                }
            </MudGrid>

            <div class="d-flex flex-column align-center">
                <MudPagination 
                    OnPageChanged="OnPageChanged"
                    Rectangular="true" 
                    Variant="Variant.Filled" 
                    Count="@(_totalPages)" 
                    ShowFirstButton="true" 
                    ShowLastButton="true"
                    @bind-Selected="@_currentPage" 
                    Page="@_currentPage"
                    Class="mt-4" />
            </div>
        }
        else
        {
            <MudText Typo="Typo.h5" Align="Align.Center">No products found.</MudText>
        }
    }
    </MudContainer>

    @code {
    private List<ProductDto> _products = new List<ProductDto>();
    private int _currentPage = 1;
    private int _totalPages = 1;
    private int _pageSize = 9;

    private bool _showOnlyInStock = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<GetProductsRequest.Response>(GetProductsRequest.RouteTemplate, CancellationToken.None);
            _products = response?.Products.ToList() ?? new List<ProductDto>();
            _totalPages = (int)Math.Ceiling(_products.Count / (double)_pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"There was a problem loading ProductDto data: {ex.Message}");
        }
    }

    private void OnPageChanged(int page)
    {
        _currentPage = page;
    }
}