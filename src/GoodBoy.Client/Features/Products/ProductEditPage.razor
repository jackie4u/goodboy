@page "/product/edit/{Id:int}"

@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavManager
@* @inject ISnackbar Snackbar *@

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<MudPopoverProvider />

<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => NavManager.NavigateTo("/"))" />

<h3>Edit Product</h3>

<ProductEditForm Product="_product" />

@code {
    private ProductDto _product = new ProductDto();

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Id.HasValue)
        {
            Console.WriteLine($"Error editing product: Id has not been provided");
            // Fixme <low>: Snackbar does not work
            // Snackbar.Add("Failed to edit product: Id has not been provided", Severity.Error);
        }

        try
        {
            string route = $"{GetProductByIdRequest.RouteTemplate}/{Id}";
            var response = await HttpClient.GetFromJsonAsync<GetProductByIdRequest.Response>(route, CancellationToken.None);
            //Todo<Low> Implement error page
            _product = response?.Product ?? new ProductDto();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product: {ex.Message}");
            // Fixme <low>: Snackbar does not work
            // Snackbar.Add("Failed to load product.", Severity.Error);
        }
    }
}